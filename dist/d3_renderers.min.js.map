{"version":3,"sources":["d3_renderers.coffee","d3_renderers.min.js"],"names":["callWithJQuery","pivotModule","exports","module","require","define","amd","jQuery","d3","$","pivotUtilities","d3_renderers","Treemap","pivotData","opts","addToTree","color","d3tree","defaults","height","i","len","ref","result","root","rowKey","tree","treemap","value","width","localeStrings","window","extend","css","name","children","path","child","newChild","x","length","shift","push","getRowKeys","getAggregator","scaleOrdinal","schemeCategory10","size","tile","treemapResquarify","hierarchy","_this","d","this","sum","select","append","style","selectAll","data","leaves","enter","attr","x0","y0","Math","max","x1","y1","text","call"],"mappings":"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","file":"d3_renderers.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\"), require(\"d3\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\", \"d3\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery, d3\r\n\r\ncallWithJQuery ($, d3) ->\r\n\r\n    $.pivotUtilities.d3_renderers = Treemap: (pivotData, opts) ->\r\n        defaults =\r\n            localeStrings: {}\r\n            d3:\r\n                width: -> $(window).width() / 1.4\r\n                height: -> $(window).height() / 1.4\r\n\r\n        opts = $.extend(true, {}, defaults, opts)\r\n\r\n\r\n        result = $(\"<div>\").css(width: \"100%\", height: \"100%\")\r\n\r\n        tree = name: \"All\", children: []\r\n        addToTree = (tree, path, value) ->\r\n            if path.length == 0\r\n                tree.value = value\r\n                return\r\n            tree.children ?= []\r\n            x = path.shift()\r\n            for child in tree.children when child.name == x\r\n                addToTree(child, path, value)\r\n                return\r\n            newChild = name: x\r\n            addToTree(newChild, path, value)\r\n            tree.children.push newChild\r\n\r\n        for rowKey in pivotData.getRowKeys()\r\n            value = pivotData.getAggregator(rowKey, []).value()\r\n            if value?\r\n                addToTree(tree, rowKey, value)\r\n\r\n        color = d3.scaleOrdinal(d3.schemeCategory10)\r\n        width = opts.d3.width()\r\n        height = opts.d3.height()\r\n\r\n        treemap = d3.treemap()\r\n            .size([width, height])\r\n            .tile(d3.treemapResquarify)\r\n\r\n        root = d3.hierarchy(tree, (d) => d.children)\r\n            .sum((d) => d.value)\r\n\r\n        d3tree = treemap(root)\r\n\r\n        d3.select(result[0])\r\n            .append(\"div\")\r\n                .style(\"position\", \"relative\")\r\n                .style(\"width\", width + \"px\")\r\n                .style(\"height\", height + \"px\")\r\n            .selectAll(\".node\")\r\n            .data(d3tree.leaves())\r\n            .enter().append(\"div\")\r\n                .attr(\"class\", \"node\")\r\n                .style(\"left\", (d) => d.x0 + \"px\")\r\n                .style(\"top\", (d) => d.y0 + \"px\")\r\n                .style(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 1) + \"px\")\r\n                .style(\"height\", (d) => Math.max(0, d.y1 - d.y0  - 1) + \"px\")\r\n                .style(\"background\", (d) -> if d.children? then \"lightgrey\" else color(d.data.name) )\r\n                .text( (d) -> d.data.name )\r\n\r\n        return result\r\n\r\n\r\n\r\n","(function() {\n  var callWithJQuery;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"), require(\"d3\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\", \"d3\"], pivotModule);\n    } else {\n      return pivotModule(jQuery, d3);\n    }\n  };\n\n  callWithJQuery(function($, d3) {\n    return $.pivotUtilities.d3_renderers = {\n      Treemap: function(pivotData, opts) {\n        var addToTree, color, d3tree, defaults, height, i, len, ref, result, root, rowKey, tree, treemap, value, width;\n        defaults = {\n          localeStrings: {},\n          d3: {\n            width: function() {\n              return $(window).width() / 1.4;\n            },\n            height: function() {\n              return $(window).height() / 1.4;\n            }\n          }\n        };\n        opts = $.extend(true, {}, defaults, opts);\n        result = $(\"<div>\").css({\n          width: \"100%\",\n          height: \"100%\"\n        });\n        tree = {\n          name: \"All\",\n          children: []\n        };\n        addToTree = function(tree, path, value) {\n          var child, i, len, newChild, ref, x;\n          if (path.length === 0) {\n            tree.value = value;\n            return;\n          }\n          if (tree.children == null) {\n            tree.children = [];\n          }\n          x = path.shift();\n          ref = tree.children;\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            if (!(child.name === x)) {\n              continue;\n            }\n            addToTree(child, path, value);\n            return;\n          }\n          newChild = {\n            name: x\n          };\n          addToTree(newChild, path, value);\n          return tree.children.push(newChild);\n        };\n        ref = pivotData.getRowKeys();\n        for (i = 0, len = ref.length; i < len; i++) {\n          rowKey = ref[i];\n          value = pivotData.getAggregator(rowKey, []).value();\n          if (value != null) {\n            addToTree(tree, rowKey, value);\n          }\n        }\n        color = d3.scaleOrdinal(d3.schemeCategory10);\n        width = opts.d3.width();\n        height = opts.d3.height();\n        treemap = d3.treemap().size([width, height]).tile(d3.treemapResquarify);\n        root = d3.hierarchy(tree, (function(_this) {\n          return function(d) {\n            return d.children;\n          };\n        })(this)).sum((function(_this) {\n          return function(d) {\n            return d.value;\n          };\n        })(this));\n        d3tree = treemap(root);\n        d3.select(result[0]).append(\"div\").style(\"position\", \"relative\").style(\"width\", width + \"px\").style(\"height\", height + \"px\").selectAll(\".node\").data(d3tree.leaves()).enter().append(\"div\").attr(\"class\", \"node\").style(\"left\", (function(_this) {\n          return function(d) {\n            return d.x0 + \"px\";\n          };\n        })(this)).style(\"top\", (function(_this) {\n          return function(d) {\n            return d.y0 + \"px\";\n          };\n        })(this)).style(\"width\", (function(_this) {\n          return function(d) {\n            return Math.max(0, d.x1 - d.x0 - 1) + \"px\";\n          };\n        })(this)).style(\"height\", (function(_this) {\n          return function(d) {\n            return Math.max(0, d.y1 - d.y0 - 1) + \"px\";\n          };\n        })(this)).style(\"background\", function(d) {\n          if (d.children != null) {\n            return \"lightgrey\";\n          } else {\n            return color(d.data.name);\n          }\n        }).text(function(d) {\n          return d.data.name;\n        });\n        return result;\n      }\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=d3_renderers.js.map\n"]}